{"version":3,"sources":["components/MainWrap.tsx","components/SearchBar.tsx","pages/index.tsx","components/ResultCard.tsx","graphql/queries/search.ts","hooks/useSearch.ts","pages/Search.tsx","utils.ts","App.tsx","index.tsx"],"names":["Footer","href","MainWrap","props","children","SearchBar","history","useHistory","initialValues","substring","onSubmit","search","push","pathname","changeUrl","handleChange","values","Input","name","value","onChange","Button","type","HomeContent","HomePage","MatchedEvidence","matchedEvidence","index","fileTextContent","textContent","ResultCard","searchResult","style","border","klerosLiquidId","map","id","SEARCH","gql","useSearch","searchQuery","useQuery","variables","called","loading","data","SearchResultsList","searchResults","length","List","ListItem","APISearchContainer","undefined","QueryContainer","SearchContainer","query","URLSearchParams","useLocation","get","SearchPage","App","exact","path","Search","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.15e1a18a.chunk.js","sourcesContent":["const Footer: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <a href=\"https://github.com/greenlucid/vagarish\">\r\n        GitHub repo. Report your issues and suggestions here.\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst MainWrap: React.FC = (props) => {\r\n  return (\r\n    <div>\r\n      {props.children}\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainWrap\r\n","import { Button, Input } from \"@material-ui/core\"\r\nimport { Form, Formik } from \"formik\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nconst SearchBar: React.FC = () => {\r\n  const history = useHistory()\r\n\r\n  const changeUrl = (substring: string) => {\r\n    const search = `?substring=${substring}`\r\n    history.push({ pathname: \"/search\", search })\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ substring: \"\" }}\r\n      onSubmit={({ substring }) => changeUrl(substring)}\r\n    >\r\n      {({ handleChange, values }) => {\r\n        return (\r\n          <Form>\r\n            <Input\r\n              name=\"substring\"\r\n              value={values.substring}\r\n              onChange={handleChange}\r\n            />\r\n            <Button type=\"submit\">Search ðŸ”Ž</Button>\r\n          </Form>\r\n        )\r\n      }}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default SearchBar\r\n","import MainWrap from \"../components/MainWrap\"\r\nimport SearchBar from \"../components/SearchBar\"\r\n\r\nconst HomeContent: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1>Vagarish</h1>\r\n      <h2>Kleros Search Engine</h2>\r\n      <SearchBar />\r\n      <p>Case and space sensitive. Graphic design is my passion.</p>\r\n      <p>Current issues I see with this:</p>\r\n      <ul>\r\n        <li>\r\n          pdfs are sometimes not parsed properly, or throw errors and are simply\r\n          ignored\r\n        </li>\r\n        <li>this page is ugly. cannot fix that yet.</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst HomePage: React.FC = () => {\r\n  return (\r\n    <MainWrap>\r\n      <HomeContent />\r\n    </MainWrap>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n","import { Evidence, SearchResult } from \"../types\"\r\n\r\nconst MatchedEvidence: React.FC<{ matchedEvidence: Evidence; index: number }> =\r\n  ({ matchedEvidence, index }) => {\r\n    if (matchedEvidence.fileTextContent) {\r\n      return (\r\n        <div>\r\n          <h3>{`Evidence #${index + 1}`}</h3>\r\n          <p>\r\n            <b>Content</b>\r\n          </p>\r\n          <p>{matchedEvidence.textContent}</p>\r\n          <p>\r\n            <b> ### File Content</b>\r\n          </p>\r\n          <p>{matchedEvidence.fileTextContent}</p>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h3>{`Evidence #${index + 1}`}</h3>\r\n        <p>\r\n          <b>Content</b>\r\n        </p>\r\n        <p>{matchedEvidence.textContent}</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\nconst ResultCard: React.FC<{ searchResult: SearchResult }> = ({\r\n  searchResult,\r\n}) => {\r\n  return (\r\n    <div style={{ border: \"1px solid black\" }}>\r\n      <a href={`https://court.kleros.io/cases/${searchResult.klerosLiquidId}`}>\r\n        <h2>{`id: ${searchResult.klerosLiquidId}`}</h2>\r\n      </a>\r\n      <div>\r\n        {searchResult.matchedEvidence.map((matchedEvidence, index) => (\r\n          <MatchedEvidence\r\n            key={matchedEvidence.id}\r\n            matchedEvidence={matchedEvidence}\r\n            index={index}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResultCard\r\n","import { gql } from \"@apollo/client\"\r\n\r\nconst SEARCH = gql`\r\n  query Search($substring: String!) {\r\n    search(options: { substring: $substring }) {\r\n      id\r\n      klerosLiquidId\r\n      arbitrable\r\n      matchedEvidence {\r\n        id\r\n        textContent\r\n        hasFile\r\n        fileTextContent\r\n        createdIn\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default SEARCH\r\n","import { useQuery } from \"@apollo/client\"\r\nimport SEARCH from \"../graphql/queries/search\"\r\nimport { SearchResult } from \"../types\"\r\n\r\nconst useSearch = (substring: string): SearchResult[] | null | undefined => {\r\n  const searchQuery = useQuery<{ search: SearchResult[] }>(SEARCH, {\r\n    variables: { substring },\r\n  })\r\n\r\n  if (!searchQuery.called || searchQuery.loading) {\r\n    return undefined\r\n  }\r\n  if (searchQuery.data && searchQuery.data.search) {\r\n    return searchQuery.data.search\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default useSearch\r\n","import { List, ListItem } from \"@material-ui/core\"\r\nimport MainWrap from \"../components/MainWrap\"\r\nimport ResultCard from \"../components/ResultCard\"\r\nimport SearchBar from \"../components/SearchBar\"\r\nimport useSearch from \"../hooks/useSearch\"\r\nimport { SearchResult } from \"../types\"\r\nimport { useURLQuery } from \"../utils\"\r\n\r\nconst SearchResultsList: React.FC<{ searchResults: SearchResult[] }> = ({\r\n  searchResults,\r\n}) => {\r\n  if (searchResults.length === 0) return <div>No results!</div>\r\n  return (\r\n    <List>\r\n      {searchResults.map((searchResult) => (\r\n        <ListItem key={searchResult.id}>\r\n          <ResultCard searchResult={searchResult} />\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n\r\nconst APISearchContainer: React.FC<{ substring: string }> = ({ substring }) => {\r\n  const searchResults = useSearch(substring)\r\n  if (searchResults === undefined) return null\r\n  if (searchResults === null) return <div>There was an issue</div>\r\n\r\n  return <SearchResultsList searchResults={searchResults} />\r\n}\r\n\r\nconst QueryContainer: React.FC<{\r\n  substring: string | undefined | null\r\n}> = ({ substring }) => {\r\n  // nulls if query is incorrect\r\n  if (!substring) return null\r\n\r\n  return <APISearchContainer substring={substring} />\r\n}\r\n\r\nconst SearchContainer: React.FC = () => {\r\n  const query = useURLQuery()\r\n\r\n  return (\r\n    <>\r\n      <SearchBar />\r\n      <QueryContainer substring={query.get(\"substring\")} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst SearchPage: React.FC = () => {\r\n  return (\r\n    <MainWrap>\r\n      <SearchContainer />\r\n    </MainWrap>\r\n  )\r\n}\r\n\r\nexport default SearchPage\r\n","import { useLocation } from \"react-router\"\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport function useURLQuery() {\r\n  return new URLSearchParams(useLocation().search)\r\n}\r\n","import { Switch, Route } from \"react-router-dom\"\r\nimport Home from \"./pages\"\r\nimport Search from \"./pages/Search\"\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Home />\r\n      </Route>\r\n      <Route path=\"/search\">\r\n        <Search />\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {\r\n  ApolloClient,\r\n  createHttpLink,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n} from \"@apollo/client\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\nimport { BrowserRouter as Router } from \"react-router-dom\"\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"http://localhost:4000/graphql\"\r\n})\r\n\r\nconst client = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache(),\r\n})\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}